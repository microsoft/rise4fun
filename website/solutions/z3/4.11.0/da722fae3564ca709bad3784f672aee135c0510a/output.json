{"output":"sat\n(\n  ;; universe for Ptr:\n  ;;   Ptr!val!3 Ptr!val!6 Ptr!val!2 Ptr!val!0 Ptr!val!8 Ptr!val!9 Ptr!val!10 Ptr!val!11 Ptr!val!12 Ptr!val!7 Ptr!val!5 Ptr!val!1 Ptr!val!4 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Ptr!val!3 () Ptr)\n  (declare-fun Ptr!val!6 () Ptr)\n  (declare-fun Ptr!val!2 () Ptr)\n  (declare-fun Ptr!val!0 () Ptr)\n  (declare-fun Ptr!val!8 () Ptr)\n  (declare-fun Ptr!val!9 () Ptr)\n  (declare-fun Ptr!val!10 () Ptr)\n  (declare-fun Ptr!val!11 () Ptr)\n  (declare-fun Ptr!val!12 () Ptr)\n  (declare-fun Ptr!val!7 () Ptr)\n  (declare-fun Ptr!val!5 () Ptr)\n  (declare-fun Ptr!val!1 () Ptr)\n  (declare-fun Ptr!val!4 () Ptr)\n  ;; cardinality constraint:\n  (forall ((x Ptr))\n          (or (= x Ptr!val!3)\n              (= x Ptr!val!6)\n              (= x Ptr!val!2)\n              (= x Ptr!val!0)\n              (= x Ptr!val!8)\n              (= x Ptr!val!9)\n              (= x Ptr!val!10)\n              (= x Ptr!val!11)\n              (= x Ptr!val!12)\n              (= x Ptr!val!7)\n              (= x Ptr!val!5)\n              (= x Ptr!val!1)\n              (= x Ptr!val!4)))\n  ;; -----------\n  (define-fun SLP () Int\n    5)\n  (define-fun null () Ptr\n    Ptr!val!0)\n  (define-fun x () Ptr\n    Ptr!val!11)\n  (define-fun RUN () Int\n    2)\n  (define-fun prev ((x!0 Ptr)) Ptr\n    (let ((a!1 (or (and (= x!0 Ptr!val!5)\n                        (not (= x!0 Ptr!val!8))\n                        (not (= x!0 Ptr!val!10))\n                        (not (= x!0 Ptr!val!12))\n                        (not (= x!0 Ptr!val!9))\n                        (not (= x!0 Ptr!val!6)))\n                   (and (= x!0 Ptr!val!9) (not (= x!0 Ptr!val!6)))))\n          (a!2 (ite (and (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!11))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!11\n                    Ptr!val!10)))\n    (let ((a!3 (ite (and (= x!0 Ptr!val!2)\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!1\n                    a!2)))\n    (let ((a!4 (ite (and (= x!0 Ptr!val!3)\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!4\n                    a!3)))\n    (let ((a!5 (ite (and (= x!0 Ptr!val!0)\n                         (not (= x!0 Ptr!val!11))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!1\n                    a!4)))\n    (let ((a!6 (ite (and (= x!0 Ptr!val!8)\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!5\n                    (ite (= x!0 Ptr!val!6) Ptr!val!2 a!5))))\n    (let ((a!7 (ite (and (= x!0 Ptr!val!7)\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!11))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!8))\n                         (not (= x!0 Ptr!val!10))\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!8\n                    a!6)))\n    (let ((a!8 (ite (and (= x!0 Ptr!val!10)\n                         (not (= x!0 Ptr!val!12))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!9\n                    a!7)))\n    (let ((a!9 (ite (and (= x!0 Ptr!val!12)\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!6)))\n                    Ptr!val!7\n                    (ite a!1 Ptr!val!0 a!8))))\n      (ite (and (= x!0 Ptr!val!1)\n                (not (= x!0 Ptr!val!7))\n                (not (= x!0 Ptr!val!0))\n                (not (= x!0 Ptr!val!11))\n                (not (= x!0 Ptr!val!2))\n                (not (= x!0 Ptr!val!3))\n                (not (= x!0 Ptr!val!5))\n                (not (= x!0 Ptr!val!8))\n                (not (= x!0 Ptr!val!10))\n                (not (= x!0 Ptr!val!12))\n                (not (= x!0 Ptr!val!9))\n                (not (= x!0 Ptr!val!6)))\n           Ptr!val!0\n           a!9))))))))))\n  (define-fun k!43 ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!1) Ptr!val!1\n    (ite (= x!0 Ptr!val!7) Ptr!val!7\n    (ite (= x!0 Ptr!val!0) Ptr!val!0\n    (ite (= x!0 Ptr!val!11) Ptr!val!11\n    (ite (= x!0 Ptr!val!2) Ptr!val!2\n    (ite (= x!0 Ptr!val!3) Ptr!val!3\n    (ite (= x!0 Ptr!val!5) Ptr!val!5\n    (ite (= x!0 Ptr!val!8) Ptr!val!8\n    (ite (= x!0 Ptr!val!10) Ptr!val!10\n    (ite (= x!0 Ptr!val!12) Ptr!val!12\n    (ite (= x!0 Ptr!val!9) Ptr!val!9\n    (ite (= x!0 Ptr!val!6) Ptr!val!6\n      Ptr!val!4)))))))))))))\n  (define-fun next ((x!0 Ptr)) Ptr\n    (let ((a!1 (ite (= (k!43 x!0) Ptr!val!4)\n                    Ptr!val!3\n                    (ite (= (k!43 x!0) Ptr!val!1) Ptr!val!2 Ptr!val!0))))\n    (let ((a!2 (ite (= (k!43 x!0) Ptr!val!2)\n                    Ptr!val!6\n                    (ite (= (k!43 x!0) Ptr!val!5) Ptr!val!8 a!1))))\n    (let ((a!3 (ite (= (k!43 x!0) Ptr!val!8)\n                    Ptr!val!7\n                    (ite (= (k!43 x!0) Ptr!val!0) Ptr!val!8 a!2))))\n    (let ((a!4 (ite (= (k!43 x!0) Ptr!val!9)\n                    Ptr!val!10\n                    (ite (= (k!43 x!0) Ptr!val!7) Ptr!val!12 a!3))))\n      (ite (= (k!43 x!0) Ptr!val!11)\n           Ptr!val!4\n           (ite (= (k!43 x!0) Ptr!val!10) Ptr!val!11 a!4)))))))\n  (define-fun new-prev ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!4) Ptr!val!11\n    (ite (= x!0 Ptr!val!2) Ptr!val!1\n    (ite (= x!0 Ptr!val!3) Ptr!val!4\n    (ite (= x!0 Ptr!val!0) Ptr!val!1\n    (ite (= x!0 Ptr!val!6) Ptr!val!2\n    (ite (= x!0 Ptr!val!8) Ptr!val!5\n    (ite (= x!0 Ptr!val!7) Ptr!val!8\n    (ite (= x!0 Ptr!val!10) Ptr!val!9\n    (ite (= x!0 Ptr!val!11) Ptr!val!10\n    (ite (= x!0 Ptr!val!9) Ptr!val!0\n    (ite (= x!0 Ptr!val!5) Ptr!val!0\n    (ite (= x!0 Ptr!val!12) Ptr!val!7\n    (ite (= x!0 Ptr!val!1) Ptr!val!0\n      (prev x!0)))))))))))))))\n  (define-fun prio ((x!0 Ptr)) Int\n    (let ((a!1 (ite (= (k!43 x!0) Ptr!val!1)\n                    7\n                    (ite (= (k!43 x!0) Ptr!val!3) 3 16))))\n    (let ((a!2 (ite (= (k!43 x!0) Ptr!val!0)\n                    4\n                    (ite (= (k!43 x!0) Ptr!val!2) 8 a!1))))\n    (let ((a!3 (ite (= (k!43 x!0) Ptr!val!7)\n                    13\n                    (ite (= (k!43 x!0) Ptr!val!6) 11 a!2))))\n    (let ((a!4 (ite (= (k!43 x!0) Ptr!val!5)\n                    15\n                    (ite (= (k!43 x!0) Ptr!val!4) 3 a!3))))\n    (let ((a!5 (ite (or (= (k!43 x!0) Ptr!val!11)\n                        (= (k!43 x!0) Ptr!val!9)\n                        (= (k!43 x!0) Ptr!val!10))\n                    3\n                    (ite (= (k!43 x!0) Ptr!val!8) 6 a!4))))\n      (ite (= (k!43 x!0) Ptr!val!12) 14 a!5)))))))\n  (define-fun state ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!43 x!0) Ptr!val!2) (= (k!43 x!0) Ptr!val!1)) 9 17)))\n    (let ((a!2 (ite (or (= (k!43 x!0) Ptr!val!4) (= (k!43 x!0) Ptr!val!3))\n                    2\n                    a!1)))\n    (let ((a!3 (ite (= (k!43 x!0) Ptr!val!0)\n                    12\n                    (ite (= (k!43 x!0) Ptr!val!5) 10 a!2))))\n    (let ((a!4 (ite (or (= (k!43 x!0) Ptr!val!7) (= (k!43 x!0) Ptr!val!8))\n                    10\n                    (ite (= (k!43 x!0) Ptr!val!6) 9 a!3))))\n    (let ((a!5 (ite (or (= (k!43 x!0) Ptr!val!11)\n                        (= (k!43 x!0) Ptr!val!9)\n                        (= (k!43 x!0) Ptr!val!10))\n                    2\n                    a!4)))\n      (ite (= (k!43 x!0) Ptr!val!12) 10 a!5)))))))\n  (define-fun new-next ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!1) Ptr!val!2\n    (ite (= x!0 Ptr!val!4) Ptr!val!3\n    (ite (= x!0 Ptr!val!5) Ptr!val!8\n    (ite (= x!0 Ptr!val!2) Ptr!val!6\n    (ite (= x!0 Ptr!val!3) Ptr!val!0\n    (ite (= x!0 Ptr!val!0) Ptr!val!8\n    (ite (= x!0 Ptr!val!8) Ptr!val!7\n    (ite (= x!0 Ptr!val!9) Ptr!val!10\n    (ite (= x!0 Ptr!val!10) Ptr!val!4\n    (ite (= x!0 Ptr!val!11) Ptr!val!0\n    (ite (= x!0 Ptr!val!7) Ptr!val!12\n    (ite (= x!0 Ptr!val!12) Ptr!val!0\n    (ite (= x!0 Ptr!val!6) Ptr!val!0\n      (next x!0)))))))))))))))\n  (define-fun new-prio ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!3) 3\n    (ite (= x!0 Ptr!val!2) 8\n    (ite (= x!0 Ptr!val!1) 7\n    (ite (= x!0 Ptr!val!0) 4\n    (ite (= x!0 Ptr!val!6) 11\n    (ite (= x!0 Ptr!val!8) 6\n    (ite (= x!0 Ptr!val!7) 13\n    (ite (= x!0 Ptr!val!4) 3\n    (ite (= x!0 Ptr!val!5) 15\n    (ite (= x!0 Ptr!val!9) 3\n    (ite (= x!0 Ptr!val!10) 3\n    (ite (= x!0 Ptr!val!11) 3\n    (ite (= x!0 Ptr!val!12) 14\n      (prio x!0)))))))))))))))\n  (define-fun new-state ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!2) 9\n    (ite (= x!0 Ptr!val!1) 9\n    (ite (= x!0 Ptr!val!3) 2\n    (ite (= x!0 Ptr!val!4) 2\n    (ite (= x!0 Ptr!val!5) 10\n    (ite (= x!0 Ptr!val!0) 12\n    (ite (= x!0 Ptr!val!6) 9\n    (ite (= x!0 Ptr!val!8) 10\n    (ite (= x!0 Ptr!val!7) 10\n    (ite (= x!0 Ptr!val!9) 2\n    (ite (= x!0 Ptr!val!10) 2\n    (ite (= x!0 Ptr!val!11) 5\n    (ite (= x!0 Ptr!val!12) 10\n      (state x!0)))))))))))))))\n)\nWhy it is not valid\nTrying again using a fresh constant bad-ptr as an witness for the failure...\nsat\n(\n  ;; universe for Ptr:\n  ;;   Ptr!val!3 Ptr!val!6 Ptr!val!2 Ptr!val!0 Ptr!val!8 Ptr!val!9 Ptr!val!7 Ptr!val!5 Ptr!val!1 Ptr!val!4 \n  ;; -----------\n  ;; definitions for universe elements:\n  (declare-fun Ptr!val!3 () Ptr)\n  (declare-fun Ptr!val!6 () Ptr)\n  (declare-fun Ptr!val!2 () Ptr)\n  (declare-fun Ptr!val!0 () Ptr)\n  (declare-fun Ptr!val!8 () Ptr)\n  (declare-fun Ptr!val!9 () Ptr)\n  (declare-fun Ptr!val!7 () Ptr)\n  (declare-fun Ptr!val!5 () Ptr)\n  (declare-fun Ptr!val!1 () Ptr)\n  (declare-fun Ptr!val!4 () Ptr)\n  ;; cardinality constraint:\n  (forall ((x Ptr))\n          (or (= x Ptr!val!3)\n              (= x Ptr!val!6)\n              (= x Ptr!val!2)\n              (= x Ptr!val!0)\n              (= x Ptr!val!8)\n              (= x Ptr!val!9)\n              (= x Ptr!val!7)\n              (= x Ptr!val!5)\n              (= x Ptr!val!1)\n              (= x Ptr!val!4)))\n  ;; -----------\n  (define-fun bad-ptr () Ptr\n    Ptr!val!2)\n  (define-fun SLP () Int\n    3)\n  (define-fun x () Ptr\n    Ptr!val!0)\n  (define-fun RUN () Int\n    2)\n  (define-fun null () Ptr\n    Ptr!val!1)\n  (define-fun prev ((x!0 Ptr)) Ptr\n    (let ((a!1 (ite (and (= x!0 Ptr!val!0)\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!8)))\n                    Ptr!val!2\n                    Ptr!val!1)))\n    (let ((a!2 (ite (and (not (= x!0 Ptr!val!1))\n                         (not (= x!0 Ptr!val!5))\n                         (not (= x!0 Ptr!val!0))\n                         (not (= x!0 Ptr!val!6))\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!8)))\n                    Ptr!val!0\n                    a!1)))\n    (let ((a!3 (ite (and (= x!0 Ptr!val!3)\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!8)))\n                    Ptr!val!4\n                    a!2)))\n    (let ((a!4 (ite (and (= x!0 Ptr!val!6)\n                         (not (= x!0 Ptr!val!7))\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!8)))\n                    Ptr!val!5\n                    a!3)))\n    (let ((a!5 (ite (and (= x!0 Ptr!val!7)\n                         (not (= x!0 Ptr!val!3))\n                         (not (= x!0 Ptr!val!2))\n                         (not (= x!0 Ptr!val!9))\n                         (not (= x!0 Ptr!val!8)))\n                    Ptr!val!6\n                    a!4)))\n      (ite (and (= x!0 Ptr!val!9) (not (= x!0 Ptr!val!8)))\n           Ptr!val!8\n           (ite (= x!0 Ptr!val!8) Ptr!val!7 a!5))))))))\n  (define-fun k!71 ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!1) Ptr!val!1\n    (ite (= x!0 Ptr!val!5) Ptr!val!5\n    (ite (= x!0 Ptr!val!0) Ptr!val!0\n    (ite (= x!0 Ptr!val!6) Ptr!val!6\n    (ite (= x!0 Ptr!val!7) Ptr!val!7\n    (ite (= x!0 Ptr!val!3) Ptr!val!3\n    (ite (= x!0 Ptr!val!2) Ptr!val!2\n    (ite (= x!0 Ptr!val!9) Ptr!val!9\n    (ite (= x!0 Ptr!val!8) Ptr!val!8\n      Ptr!val!4))))))))))\n  (define-fun next ((x!0 Ptr)) Ptr\n    (let ((a!1 (ite (= (k!71 x!0) Ptr!val!2)\n                    Ptr!val!0\n                    (ite (= (k!71 x!0) Ptr!val!0) Ptr!val!4 Ptr!val!1))))\n    (let ((a!2 (ite (or (= (k!71 x!0) Ptr!val!1) (= (k!71 x!0) Ptr!val!5))\n                    Ptr!val!6\n                    (ite (= (k!71 x!0) Ptr!val!4) Ptr!val!3 a!1))))\n    (let ((a!3 (ite (= (k!71 x!0) Ptr!val!7)\n                    Ptr!val!8\n                    (ite (= (k!71 x!0) Ptr!val!6) Ptr!val!7 a!2))))\n      (ite (= (k!71 x!0) Ptr!val!8) Ptr!val!9 a!3)))))\n  (define-fun new-prev ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!0) Ptr!val!2\n    (ite (= x!0 Ptr!val!4) Ptr!val!0\n    (ite (= x!0 Ptr!val!3) Ptr!val!4\n    (ite (= x!0 Ptr!val!1) Ptr!val!1\n    (ite (= x!0 Ptr!val!6) Ptr!val!5\n    (ite (= x!0 Ptr!val!7) Ptr!val!6\n    (ite (= x!0 Ptr!val!5) Ptr!val!1\n    (ite (= x!0 Ptr!val!8) Ptr!val!7\n    (ite (= x!0 Ptr!val!9) Ptr!val!8\n      (prev x!0)))))))))))\n  (define-fun prio ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!71 x!0) Ptr!val!2)\n                        (= (k!71 x!0) Ptr!val!4)\n                        (= (k!71 x!0) Ptr!val!3)\n                        (= (k!71 x!0) Ptr!val!0))\n                    4\n                    8)))\n      (ite (or (= (k!71 x!0) Ptr!val!9)\n               (= (k!71 x!0) Ptr!val!5)\n               (= (k!71 x!0) Ptr!val!7)\n               (= (k!71 x!0) Ptr!val!6)\n               (= (k!71 x!0) Ptr!val!8))\n           7\n           (ite (= (k!71 x!0) Ptr!val!1) 5 a!1))))\n  (define-fun state ((x!0 Ptr)) Int\n    (let ((a!1 (ite (or (= (k!71 x!0) Ptr!val!2)\n                        (= (k!71 x!0) Ptr!val!4)\n                        (= (k!71 x!0) Ptr!val!3)\n                        (= (k!71 x!0) Ptr!val!0))\n                    2\n                    9)))\n      (ite (or (= (k!71 x!0) Ptr!val!9)\n               (= (k!71 x!0) Ptr!val!5)\n               (= (k!71 x!0) Ptr!val!7)\n               (= (k!71 x!0) Ptr!val!6)\n               (= (k!71 x!0) Ptr!val!8))\n           2\n           (ite (= (k!71 x!0) Ptr!val!1) 6 a!1))))\n  (define-fun new-next ((x!0 Ptr)) Ptr\n    (ite (= x!0 Ptr!val!0) Ptr!val!1\n    (ite (= x!0 Ptr!val!2) Ptr!val!4\n    (ite (= x!0 Ptr!val!4) Ptr!val!3\n    (ite (= x!0 Ptr!val!3) Ptr!val!1\n    (ite (= x!0 Ptr!val!5) Ptr!val!6\n    (ite (= x!0 Ptr!val!1) Ptr!val!6\n    (ite (= x!0 Ptr!val!6) Ptr!val!7\n    (ite (= x!0 Ptr!val!7) Ptr!val!8\n    (ite (= x!0 Ptr!val!8) Ptr!val!9\n    (ite (= x!0 Ptr!val!9) Ptr!val!1\n      (next x!0))))))))))))\n  (define-fun new-prio ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!0) 4\n    (ite (= x!0 Ptr!val!3) 4\n    (ite (= x!0 Ptr!val!2) 4\n    (ite (= x!0 Ptr!val!4) 4\n    (ite (= x!0 Ptr!val!1) 5\n    (ite (= x!0 Ptr!val!6) 7\n    (ite (= x!0 Ptr!val!7) 7\n    (ite (= x!0 Ptr!val!5) 7\n    (ite (= x!0 Ptr!val!8) 7\n    (ite (= x!0 Ptr!val!9) 7\n      (prio x!0))))))))))))\n  (define-fun new-state ((x!0 Ptr)) Int\n    (ite (= x!0 Ptr!val!0) 3\n    (ite (= x!0 Ptr!val!2) 2\n    (ite (= x!0 Ptr!val!3) 2\n    (ite (= x!0 Ptr!val!4) 2\n    (ite (= x!0 Ptr!val!1) 6\n    (ite (= x!0 Ptr!val!5) 2\n    (ite (= x!0 Ptr!val!6) 2\n    (ite (= x!0 Ptr!val!7) 2\n    (ite (= x!0 Ptr!val!8) 2\n    (ite (= x!0 Ptr!val!9) 2\n      (state x!0))))))))))))\n)\nnull is\nPtr!val!1\nbad-ptr is\nPtr!val!2\nIn the new state, bad-ptr.next is\nPtr!val!4\nIn the new state, bad-ptr.next.prev is\nPtr!val!0\n","error":"","status":"z3-ran","hash":"da722fae3564ca709bad3784f672aee135c0510a"}
